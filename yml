trigger:
- main  # mainブランチに push したら実行

pool:
  vmImage: 'ubuntu-latest'  # Microsoft-hosted Agentを使用

variables:
  azureSubscription: '<Azure DevOps Service Connection Name>'
  resourceGroupName: '<ResourceGroupName>'
  location: 'japaneast'
  automationAccountName: '<AutomationAccountName>'

steps:
- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'ARM テンプレートをデプロイ'
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: $(azureSubscription)
    subscriptionId: '<Your Azure Subscription ID>'
    action: 'Create Or Update Resource Group'
    resourceGroupName: $(resourceGroupName)
    location: $(location)
    templateLocation: 'Linked artifact'
    csmFile: 'template.json'
    overrideParameters: >
      -automationAccountName $(automationAccountName)


- task: AzureCLI@2
  displayName: 'Runbook を作成 & スクリプトを適用'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Runbook が存在するかチェック
      RUNBOOK_EXISTS=$(az automation runbook list \
        --automation-account-name $(automationAccountName) \
        --resource-group $(resourceGroupName) \
        --query "[?name=='MyRunbook'] | length(@)")

      # Runbook がなければ作成
      if [ "$RUNBOOK_EXISTS" -eq "0" ]; then
        echo "Runbook を新規作成"
        az automation runbook create \
          --automation-account-name $(automationAccountName) \
          --name "MyRunbook" \
          --resource-group $(resourceGroupName) \
          --type PowerShell \
          --description "Azure DevOps からデプロイ"
      else
        echo "Runbook は既に存在"
      fi

      # DevOps のリポジトリ内の PowerShell スクリプトを取得して適用
      echo "スクリプトを Runbook に適用"
      az automation runbook replace-content \
        --automation-account-name $(automationAccountName) \
        --name "MyRunbook" \
        --resource-group $(resourceGroupName) \
        --content "$(cat $(Build.SourcesDirectory)/MyRunbook.ps1)"

- task: AzureCLI@2
  displayName: 'Runbook を発行'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az automation runbook publish \
        --automation-account-name $(automationAccountName) \
        --name "MyRunbook" \
        --resource-group $(resourceGroupName)


- task: AzureCLI@2
  displayName: 'Runbook を実行'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az automation runbook start \
        --automation-account-name $(automationAccountName) \
        --name "MyRunbook" \
        --resource-group $(resourceGroupName) \
        --parameters message="Hello from Azure DevOps"

trigger:
- main  # mainブランチに push したら実行

pool:
  vmImage: 'ubuntu-latest'  # Microsoft-hosted Agentを使用

variables:
  azureSubscription: '<Azure DevOps Service Connection Name>'
  resourceGroupName: '<ResourceGroupName>'
  location: 'japaneast'
  automationAccountName: '<AutomationAccountName>'
  runbookName: 'MyRunbook'
  scriptPath: 'MyRunbook.ps1'

steps:
- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'ARM テンプレートをデプロイ'
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: $(azureSubscription)
    subscriptionId: '<Your Azure Subscription ID>'
    action: 'Create Or Update Resource Group'
    resourceGroupName: $(resourceGroupName)
    location: $(location)
    templateLocation: 'Linked artifact'
    csmFile: 'template.json'
    overrideParameters: >
      -automationAccountName $(automationAccountName)

- task: AzureCLI@2
  displayName: 'Runbook を作成 & スクリプトを適用'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      RUNBOOK_EXISTS=$(az automation runbook list \
        --automation-account-name $(automationAccountName) \
        --resource-group $(resourceGroupName) \
        --query "[?name=='$(runbookName)'] | length(@)")

      if [ "$RUNBOOK_EXISTS" -eq "0" ]; then
        echo "Runbook を新規作成"
        az automation runbook create \
          --automation-account-name $(automationAccountName) \
          --name $(runbookName) \
          --resource-group $(resourceGroupName) \
          --type PowerShell \
          --description "Azure DevOps からデプロイ"
      else
        echo "Runbook は既に存在"
      fi

      echo "スクリプトを Runbook に適用"
      az automation runbook replace-content \
        --automation-account-name $(automationAccountName) \
        --name $(runbookName) \
        --resource-group $(resourceGroupName) \
        --content "$(cat $(Build.SourcesDirectory)/$(scriptPath))"

- task: AzureCLI@2
  displayName: 'Runbook を発行'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az automation runbook publish \
        --automation-account-name $(automationAccountName) \
        --name $(runbookName) \
        --resource-group $(resourceGroupName)

- task: AzureCLI@2
  displayName: 'Runbook を実行'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az automation runbook start \
        --automation-account-name $(automationAccountName) \
        --name $(runbookName) \
        --resource-group $(resourceGroupName) \
        --parameters message="Hello from Azure DevOps"
